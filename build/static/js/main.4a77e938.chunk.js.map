{"version":3,"sources":["../../src/BCIDevice.ts","socket.js","commands.js","index.js"],"names":["DeviceType","DeviceState","ScalpElectrodes","socket","io","BCIDevice","callbacks","this","device","type","NONE","state","DISCONNECTED","CONNECTED","disconnect","navigator","bluetooth","requestDevice","filters","namePrefix","optionalServices","muse","dev","_a","sent","gatt","name","Error","sensors","self","x","match","MUSE","GANGLION","getType","indexOf","TP9","TP10","AF7","AF8","sync","Array","fill","subscription","d","eegReadings","subscribe","sample","electrode","delta","timestamp","dataHandler","data","samples","sampleRate","length","telemetryData","status","statusHandler","connectionStatus","connectionHandler","ganglion_ble_umd","FP1","FP2","O1","O2","stream","forEach","val","ind","getUTCMilliseconds","console","warn","prototype","callback","electrodeIndex","buffer","weighted","alpha","beta","theta","gamma","engagement","bci","el","SECONDS","shift","push","psd","window","signal","getPSD","getBandPower","sum","w_alpha","w_beta","w_theta","w_gamma","emit","sendCommand","command","log","sendConnection","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","connect","t0","stop","apply","arguments","Commands","react_default","createElement","className","onClick","React","Component","ReactDOM","render","commands","document","querySelector"],"mappings":"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","file":"static/js/main.4a77e938.chunk.js","sourcesContent":["import { MuseClient, MUSE_SERVICE, channelNames } from 'muse-js';\nimport { Ganglion } from \"ganglion-ble\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\n\nvar GANGLION_SERVICE = 0xfe84;\nexport var DeviceType;\n(function (DeviceType) {\n    DeviceType[DeviceType[\"NONE\"] = 0] = \"NONE\";\n    DeviceType[DeviceType[\"MUSE\"] = 1] = \"MUSE\";\n    DeviceType[DeviceType[\"GANGLION\"] = 2] = \"GANGLION\";\n})(DeviceType || (DeviceType = {}));\n;\nexport var DeviceState;\n(function (DeviceState) {\n    DeviceState[DeviceState[\"CONNECTED\"] = 0] = \"CONNECTED\";\n    DeviceState[DeviceState[\"DISCONNECTED\"] = 1] = \"DISCONNECTED\";\n})(DeviceState || (DeviceState = {}));\nexport var ScalpElectrodes;\n(function (ScalpElectrodes) {\n    ScalpElectrodes[ScalpElectrodes[\"FP1\"] = 0] = \"FP1\";\n    ScalpElectrodes[ScalpElectrodes[\"FP2\"] = 1] = \"FP2\";\n    ScalpElectrodes[ScalpElectrodes[\"AF7\"] = 2] = \"AF7\";\n    ScalpElectrodes[ScalpElectrodes[\"AF8\"] = 3] = \"AF8\";\n    ScalpElectrodes[ScalpElectrodes[\"F7\"] = 4] = \"F7\";\n    ScalpElectrodes[ScalpElectrodes[\"F3\"] = 5] = \"F3\";\n    ScalpElectrodes[ScalpElectrodes[\"FZ\"] = 6] = \"FZ\";\n    ScalpElectrodes[ScalpElectrodes[\"F4\"] = 7] = \"F4\";\n    ScalpElectrodes[ScalpElectrodes[\"F8\"] = 8] = \"F8\";\n    ScalpElectrodes[ScalpElectrodes[\"A1\"] = 9] = \"A1\";\n    ScalpElectrodes[ScalpElectrodes[\"T3\"] = 10] = \"T3\";\n    ScalpElectrodes[ScalpElectrodes[\"C3\"] = 11] = \"C3\";\n    ScalpElectrodes[ScalpElectrodes[\"CZ\"] = 12] = \"CZ\";\n    ScalpElectrodes[ScalpElectrodes[\"C4\"] = 13] = \"C4\";\n    ScalpElectrodes[ScalpElectrodes[\"T4\"] = 14] = \"T4\";\n    ScalpElectrodes[ScalpElectrodes[\"A2\"] = 15] = \"A2\";\n    ScalpElectrodes[ScalpElectrodes[\"TP9\"] = 16] = \"TP9\";\n    ScalpElectrodes[ScalpElectrodes[\"TP10\"] = 17] = \"TP10\";\n    ScalpElectrodes[ScalpElectrodes[\"T5\"] = 18] = \"T5\";\n    ScalpElectrodes[ScalpElectrodes[\"P3\"] = 19] = \"P3\";\n    ScalpElectrodes[ScalpElectrodes[\"PZ\"] = 20] = \"PZ\";\n    ScalpElectrodes[ScalpElectrodes[\"P4\"] = 21] = \"P4\";\n    ScalpElectrodes[ScalpElectrodes[\"T6\"] = 22] = \"T6\";\n    ScalpElectrodes[ScalpElectrodes[\"O1\"] = 23] = \"O1\";\n    ScalpElectrodes[ScalpElectrodes[\"O2\"] = 24] = \"O2\";\n})(ScalpElectrodes || (ScalpElectrodes = {}));\n;\nvar BCIDevice = (function () {\n    function BCIDevice(callbacks) {\n        this.device = null;\n        this.type = DeviceType.NONE;\n        this.state = DeviceState.DISCONNECTED;\n        this.callbacks = callbacks;\n    }\n    BCIDevice.prototype.connect = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var dev, gatt, getType, sensors, self;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (this.device !== null && this.state === DeviceState.CONNECTED)\n                            this.disconnect();\n                        return [4, navigator.bluetooth.requestDevice({\n                                filters: [\n                                    {\n                                        namePrefix: \"Ganglion-\"\n                                    },\n                                    {\n                                        namePrefix: \"Muse-\"\n                                    }\n                                ],\n                                optionalServices: [MUSE_SERVICE, GANGLION_SERVICE]\n                            })];\n                    case 1:\n                        dev = _a.sent();\n                        if (!dev || !dev.gatt || !dev.name)\n                            throw new Error(\"Required fields are empty!\");\n                        return [4, dev.gatt.connect()];\n                    case 2:\n                        gatt = _a.sent();\n                        this.state = DeviceState.CONNECTED;\n                        getType = function (x) {\n                            if (x.name.match(/^Muse-/))\n                                return DeviceType.MUSE;\n                            if (x.name.match(/^Ganglion-/))\n                                return DeviceType.GANGLION;\n                            throw new Error(\"Unknown device type with name: \" + x.name);\n                        };\n                        sensors = [];\n                        self = this;\n                        switch (getType(dev)) {\n                            case DeviceType.MUSE:\n                                this.type = DeviceType.MUSE;\n                                this.device = new MuseClient();\n                                sensors[channelNames.indexOf(\"TP9\")] = ScalpElectrodes.TP9;\n                                sensors[channelNames.indexOf(\"TP10\")] = ScalpElectrodes.TP10;\n                                sensors[channelNames.indexOf(\"AF7\")] = ScalpElectrodes.AF7;\n                                sensors[channelNames.indexOf(\"AF8\")] = ScalpElectrodes.AF8;\n                                this.sync = new Array(4).fill(0);\n                                this.subscription = function () {\n                                    var d = self.device;\n                                    d.eegReadings.subscribe(function (sample) {\n                                        var electrode = sensors[sample.electrode];\n                                        var delta = sample.timestamp - self.sync[electrode];\n                                        if (self.callbacks.dataHandler) {\n                                            self.callbacks.dataHandler({\n                                                data: sample.samples,\n                                                electrode: electrode,\n                                                sampleRate: 1000 / delta * sample.samples.length\n                                            });\n                                        }\n                                        self.sync[electrode] = sample.timestamp;\n                                    });\n                                    d.telemetryData.subscribe(function (status) {\n                                        if (self.callbacks.statusHandler)\n                                            self.callbacks.statusHandler(status);\n                                    });\n                                    d.connectionStatus.subscribe(function (status) {\n                                        if (self.callbacks.connectionHandler)\n                                            self.callbacks.connectionHandler(status);\n                                    });\n                                };\n                                break;\n                            case DeviceType.GANGLION:\n                                this.type = DeviceType.GANGLION;\n                                this.device = new Ganglion();\n                                sensors[0] = ScalpElectrodes.FP1;\n                                sensors[1] = ScalpElectrodes.FP2;\n                                sensors[2] = ScalpElectrodes.O1;\n                                sensors[3] = ScalpElectrodes.O2;\n                                this.sync = new Array(4).fill(0);\n                                this.subscription = function () {\n                                    var d = self.device;\n                                    d.stream.subscribe(function (sample) {\n                                        sample.data.forEach(function (val, ind) {\n                                            var electrode = sensors[ind];\n                                            var delta = sample.timestamp.getUTCMilliseconds() - self.sync[electrode];\n                                            if (self.callbacks.dataHandler) {\n                                                self.callbacks.dataHandler({\n                                                    data: [val],\n                                                    electrode: electrode,\n                                                    sampleRate: 1000 / delta\n                                                });\n                                            }\n                                            self.sync[electrode] = sample.timestamp.getUTCMilliseconds();\n                                        });\n                                    });\n                                    console.warn(\"BCIDevice: Ganglion does not offer status information.\");\n                                    console.warn(\"BCIDevice: Ganglion does not offer connection information.\");\n                                    if (self.callbacks.connectionHandler)\n                                        self.callbacks.connectionHandler(true);\n                                };\n                                break;\n                        }\n                        return [4, this.device.connect(gatt)];\n                    case 3:\n                        _a.sent();\n                        return [4, this.device.start()];\n                    case 4:\n                        _a.sent();\n                        this.subscription();\n                        return [2];\n                }\n            });\n        });\n    };\n    BCIDevice.prototype.disconnect = function () {\n        if (this.state === DeviceState.DISCONNECTED)\n            return;\n        this.device.disconnect();\n        this.state = DeviceState.DISCONNECTED;\n    };\n    BCIDevice.prototype.subscribe = function (callback) {\n        this.callbacks.dataHandler = callback;\n    };\n    BCIDevice.electrodeIndex = function (electrode) {\n        return ScalpElectrodes[electrode];\n    };\n    return BCIDevice;\n}());\nexport default BCIDevice ;\n//# sourceMappingURL=BCIDevice.js.map","import io from 'socket.io-client';\n\nconst socket = io('http://localhost:6767');\n\nexport default socket;","\nimport React from 'react';\nimport {useEffect, useState} from 'react';\nimport socket from './socket';\nimport BCIDevice from './BCIDevice';\n\nconst SECONDS = 0.25;\nconst BUFFER_SIZE = SECONDS * 256;\nconst WEIGHT = 0.95;\n\nlet buffer = new Array();\nlet weighted = {\n    alpha: -1,\n    beta: -1,\n    theta: -1,\n    gamma: -1,\n    engagement: -1\n};\n\nlet bci = new BCIDevice({\n    dataHandler: data => {\n        data.data.forEach(el => {\n            if (buffer.length > BUFFER_SIZE) buffer.shift();\n            buffer.push(el);\n        });\n\n        if (buffer.length < BUFFER_SIZE) return;\n\n        let psd = window.bci.signal.getPSD(BUFFER_SIZE, buffer);\n\n        let alpha = window.bci.signal.getBandPower(BUFFER_SIZE, psd, 256, \"alpha\");\n        let beta  = window.bci.signal.getBandPower(BUFFER_SIZE,psd, 256, \"beta\");\n        let theta = window.bci.signal.getBandPower(BUFFER_SIZE,psd, 256, \"theta\");\n        let gamma = window.bci.signal.getBandPower(BUFFER_SIZE,psd, 256, \"gamma\");\n        let engagement = beta / (alpha + theta);\n        let sum = alpha + beta + theta + gamma;\n\n        let w_alpha = alpha / sum;\n        let w_beta = beta / sum;\n        let w_theta = theta / sum;\n        let w_gamma = gamma / sum;\n\n        if (weighted.alpha < 0) {\n            weighted.alpha = w_alpha || 0;\n            weighted.beta = w_beta || 0;\n            weighted.theta = w_theta || 0;\n            weighted.gamma = w_gamma || 0;\n            weighted.engagement = engagement || 0;\n        } else {\n            weighted.alpha = weighted.alpha * WEIGHT + (w_alpha || 0) * (1 - WEIGHT);\n            weighted.beta =  weighted.beta  * WEIGHT + (w_beta  || 0)  * (1 - WEIGHT);\n            weighted.theta = weighted.theta * WEIGHT + (w_theta || 0) * (1 - WEIGHT);\n            weighted.gamma = weighted.gamma * WEIGHT + (w_gamma || 0) * (1 - WEIGHT);\n            weighted.engagement = weighted.engagement * WEIGHT + (engagement || 0) * (1 - WEIGHT);\n        }\n        socket.emit('data', weighted.engagement)\n    }\n})\n\nconst sendCommand = command => {\n    return function() {\n        console.log('The command pressed was: ', command)\n        socket.emit('command', command)\n    }\n    \n}\n\nlet sendConnection = async () => {\n    console.log('here')\n    try {\n        await bci.connect()\n        console.log('here')\n    } catch(e) {\n        console.log(e)\n    }\n}\n\nfunction useSocket() {\n    const [status, updateStatus] = useState('DISCONNECTED');\n    const useEffect = (() => {\n      socket.on('status', updateStatus);\n      return () => socket.removeListener('status');\n    }, []);\n    return status;\n  };\n\nconst Commands = () => (\n        <div>\n            <div className=\"ui two top attached buttons\">\n                <button className=\"ui button\" onClick={sendCommand('takeoff')}>Takeoff</button> \n                <button className=\"ui button\" onClick= {sendCommand('land')}>Land</button>   \n            </div>\n            <div className=\"ui center vertical basic buttons\">\n                <button className=\"ui button\" onClick={sendCommand('up 50')}>Up 50cm</button>\n                <button className=\"ui button\"onClick={sendCommand('down 50')}>Down 50cm</button>\n                <button className=\"ui button\" onClick={sendCommand('right 50')}>Right 50cm</button>\n                <button className=\"ui button\" onClick={sendCommand('left 50')}>Left 50cm</button>\n                <button className=\"ui button\" onClick={sendCommand('forward 50')}>Forward 50cm</button>\n                <button className=\"ui button\" onClick={sendCommand('back 50')}>Backwards 50cm</button>\n            </div>\n            <div className=\"ui two bottom attached buttons\">\n                <button className=\"negative ui button\" onClick= {sendCommand('emergency')}>Emergency</button>\n                <button className=\"ui button\" onClick= {sendConnection}>Connect!</button>   \n            </div>   \n            \n        </div>\n        \n)\nexport default Commands;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Commands from './commands';\n\nclass App extends React.Component { \n\n    render() {\n        return (\n            <Commands />       \n        )\n    }\n}\n\nReactDOM.render (\n    <Commands />,\n    document.querySelector('#root')\n)"],"sourceRoot":""}